class seg_tree {
    // build(vector) - put all initial values into the segtree (vector is 0 indexed, and contains 0-1)
    // upd(l, r) - invert the elements from interval [l, r)
    // ask(nth) - find the nth one (indexed from zero)
    int B;
    vector<int> T, lazy;
 
 public:
    
    seg_tree(int x) {
        B = 1;
        while(B < x) B *= 2;
        T.assign(B * 2, 0);
        lazy.assign(B * 2, 0);
    }

    int merge(int a, int b) {
        return a + b;
    }
    void propagate(int node, int l, int r) {
        if(r - l == 1 || !lazy[node]) return;
        int mid = (l + r) / 2;
        for(int son : {node * 2 + 1, node * 2 + 2}) {
            T[son] = (mid - l) - T[son];
            lazy[son] ^= 1;
        }
        lazy[node] = 0;
    }
    void build(int node, int l, int r, vector<int>& a) {
        if (r - l == 1) {
            if (l < a.size()) {
                T[node] = a[l];
            }
            return;
        }
        int mid = (l + r) / 2;
        build(node * 2 + 1, l, mid, a);
        build(node * 2 + 2, mid, r, a);
        T[node] = merge(T[node * 2 + 1], T[node * 2 + 2]);
    }   
    void build(vector<int> &a) {
        build(0, 0, B, a);
    }
 
    void upd(int node, int l, int r, int lf, int rg) {
        propagate(node, l, r);
        if(l >= rg || r <= lf) return;
        if(l >= lf && r <= rg) {
            T[node] = (r - l) - T[node];
            lazy[node] ^= 1;
            return;
        }
        int mid = (l + r) / 2;
        upd(node * 2 + 1, l, mid, lf, rg);
        upd(node * 2 + 2, mid, r, lf, rg);
        T[node] = merge(T[node * 2 + 1], T[node * 2 + 2]);
    }
    void upd(int l, int r) {
        upd(0, 0, B, l, r);
    }
 
    int ask(int node, int l, int r, int nth) {
        propagate(node, l, r);
        if(T[node] < nth + 1) {
            return -1;
        }
        if(r - l == 1) {
            return l;
        }
        int mid = (l + r) / 2;
        int ans = ask(node * 2 + 1, l, mid, nth);
        if(ans == -1) {
            propagate(node * 2 + 1, l, mid);
            ans = ask(node * 2 + 2, mid, r, nth - T[node * 2 + 1]);
        }
        return ans;
    }
    int ask(int nth) {
        return ask(0, 0, B, nth);
    }
};
