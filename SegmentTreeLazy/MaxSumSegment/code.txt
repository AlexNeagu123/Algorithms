struct segment {
    int pre, suf, whole, sum;
    segment(int x) : pre(x), suf(x), whole(x), sum(x) {};
    segment(int _pre, int _suf, int _whole, int _sum) : pre(_pre), suf(_suf), whole(_whole), sum(_sum) {};
};

class seg_tree {
    // build(vector) - put all initial values into the segtree (vector is 0 indexed)
    // upd(l r, x) - assign x to elements from interval [l, r) 
    // ask(l, r) - maximum subsegment sum from interval [l, r) (returned as a struct segment with components pre, suf, whole, sum)
    // segment.whole is the actua maximum sum
    int B;
    const int nope = -INF;
    vector<segment> T;
    vector<int> lazy;

 public:
    
    seg_tree(int x) {
        B = 1;
        while(B < x) B *= 2;
        T.assign(B * 2, segment(0));
        lazy.assign(B * 2, nope);
    }

    segment merge(segment lson, segment rson) {
        int sum = lson.sum + rson.sum;
        int pre = max(lson.pre, lson.sum + rson.pre);
        int suf = max(rson.suf, rson.sum + lson.suf);
        int whole = max({lson.whole, rson.whole, lson.suf + rson.pre});
        return segment(pre, suf, whole, sum);
    }
    void propagate(int node, int l, int r) {
        if(r - l == 1 || lazy[node] == nope) return;
        int mid = (l + r) / 2;
        for(int son : {node * 2 + 1, node * 2 + 2}) {
            int all = lazy[node] * (mid - l);
            T[son] = segment(lazy[node] < 0 ? 0 : all, lazy[node] < 0 ? 0 : all, lazy[node] < 0 ? 0 : all, all);
            lazy[son] = lazy[node];
        }
        lazy[node] = nope;
    }
    void build(int node, int l, int r, vector<int>& a) {
        if (r - l == 1) {
            if (l < a.size()) {
                T[node] = segment(a[l]);
            }
            return;
        }
        int mid = (l + r) / 2;
        build(node * 2 + 1, l, mid, a);
        build(node * 2 + 2, mid, r, a);
        T[node] = merge(T[node * 2 + 1], T[node * 2 + 2]);
    }   
    void build(vector<int> &a) {
        build(0, 0, B, a);
    }
 
    void upd(int node, int l, int r, int lf, int rg, int x) {
        propagate(node, l, r);
        if(r <= lf || l >= rg) return;
        if(l >= lf && r <= rg) {
            int all = x * (r - l);
            T[node] = segment(x < 0 ? 0 : all, x < 0 ? 0 : all, x < 0 ? 0 : all, all);
            lazy[node] = x;
            return;
        }
        int mid = (l + r) / 2;
        upd(node * 2 + 1, l, mid, lf, rg, x);
        upd(node * 2 + 2, mid, r, lf, rg, x);
        T[node] = merge(T[node * 2 + 1], T[node * 2 + 2]);
    }
    void upd(int lf, int rg, int x) {
        upd(0, 0, B, lf, rg, x);
    }
    segment ask(int node, int l, int r, int lf, int rg) {
        propagate(node, l, r);
        if(l >= rg || r <= lf) {
            return segment(-INF);
        }
        if(l >= lf && r <= rg) {
            return T[node];
        }
        int mid = (l + r) / 2;
        return merge(ask(node * 2 + 1, l, mid, lf, rg), ask(node * 2 + 2, mid, r, lf, rg));
    }
    segment ask(int l, int r) {
        return ask(0, 0, B, l, r);
    }
};
